version: 2.1

executors:
  clj:
    docker:
      - image: cimg/clojure:1.11.1-openjdk-17.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
  cljs:
    docker:
      - image: cimg/clojure:1.11.1-node
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        
jobs:

  test:
    executor: cljs
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - npm-dependencies-
      - run:
          name: Npm dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules/
          key: npm-dependencies-{{ checksum "package.json" }}
      - restore_cache:
          keys:
            - shadow-test-dependencies-{{ checksum "shadow-cljs.edn" }}
            # fallback to using the latest cache if no exact match is found
            - shadow-test-dependencies-
      - run:
          name: Compile test code
          command: npx shadow-cljs compile test-ci
      - save_cache:
          paths:
            - .shadow-cljs/
          key: shadow-test-dependencies-{{ checksum "shadow-cljs.edn" }}
      - run:
          name: Run tests
          command: node target/js/node-tests.js 1>junit-cljs.xml
      - store_test_results:
          path: junit-cljs.xml

  deploy:
    executor: clj
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "deps.edn" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Dependencies
          command: clojure -X:deps prep
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "deps.edn" }}
      - run:
          name: Build Jar
          command: clojure -X:jar
      - run:
          name: Deploy to Clojars
          command: clojure -X:jar:deploy

workflows:
  version: 2
  build:
    jobs:
      - test
      - deploy:
          context: clojars
          requires:
            - test
